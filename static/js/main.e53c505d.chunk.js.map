{"version":3,"sources":["components/TodoTextInput.js","components/Header.js","constants/ActionTypes.js","actions/index.js","containers/Header.js","components/Link.js","containers/FilterLink.js","constants/TodoFilters.js","components/Footer.js","components/TodoItem.js","components/TodoList.js","selectors/index.js","containers/VisibleTodoList.js","components/MainSection.js","containers/MainSection.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["TodoTextInput","state","text","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","className","classnames","edit","this","editing","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Component","Header","addTodo","length","ADD_TODO","DELETE_TODO","EDIT_TODO","COMPLETE_TODO","COMPLETE_ALL_TODOS","CLEAR_COMPLETED","SET_VISIBILITY_FILTER","types","deleteTodo","id","editTodo","completeTodo","completeAllTodos","clearCompleted","setVisibilityFilter","filter","connect","Link","active","children","setFilter","href","selected","style","cursor","onClick","ownProps","visibilityFilter","dispatch","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","FILTER_TITLES","Footer","activeCount","completedCount","onClearCompleted","itemWord","Object","keys","map","FilterLink","TodoItem","handleDoubleClick","handleSave","element","todo","checked","completed","onDoubleClick","TodoList","filteredTodos","actions","getTodos","todos","getVisibleTodos","createSelector","Error","getCompletedTodoCount","reduce","count","VisibleTodoList","bindActionCreators","TodoActions","MainSection","todosCount","readOnly","App","initialState","action","rootReducer","combineReducers","maxId","Math","max","areAllMarked","every","store","createStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e53c505d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\n\nexport default class TodoTextInput extends Component {\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    newTodo: PropTypes.bool\n  }\n\n  state = {\n    text: this.props.text || '',\n  }\n\n  handleSubmit = e => {\n    const text = e.target.value.trim();\n    if (e.which === 13) { // pressing the Enter button or e.key === 'Enter'\n      this.props.onSave(text);\n      if (this.props.newTodo) {\n        this.setState ({\n          text: '',\n        })\n      }\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      text: e.target.value,\n    })\n  }\n\n  handleBlur = e => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value);\n    }\n  }\n  render() {\n    return (\n      <input\n      className={\n        classnames({\n          edit: this.props.editing,\n          'new-todo': this.props.newTodo,\n        })\n      }\n      type='text'\n      placeholder={this.props.placeholder}\n      autoFocus={true}\n      value={this.state.text}\n      onBlur={this.handleBlur}\n      onChange={this.handleChange}\n      onKeyDown={this.handleSubmit}\n      />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoTextInput from './TodoTextInput';\n\nfunction Header({addTodo}) {\n  return (\n   <header className=\"header\">\n     <h1>todos</h1>\n     <TodoTextInput\n      newTodo\n      onSave={(text) => {\n        if (text.length !== 0) {\n          addTodo(text);\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n     />\n   </header>\n  )\n}\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n}\n\nexport default Header;\n\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\nexport const COMPLETE_ALL_TODOS = 'COMPLETE_ALL_TODOS';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER';\n","import * as types from '../constants/ActionTypes';\n\nexport const addTodo = text => ({\n  type: types.ADD_TODO,\n  text,\n})\n\nexport const deleteTodo = id => ({\n  type: types.DELETE_TODO,\n  id,\n})\n\nexport const editTodo = (id, text) => ({\n  type: types.EDIT_TODO,\n  id,\n  text,\n})\n\nexport const completeTodo = id => ({\n  type: types.COMPLETE_TODO,\n  id,\n})\n\nexport const completeAllTodos = () => ({\n  type: types.COMPLETE_ALL_TODOS,\n})\n\nexport const clearCompleted = () => ({\n  type: types.CLEAR_COMPLETED,\n})\n\nexport const setVisibilityFilter = filter => ({\n  type: types.SET_VISIBILITY_FILTER,\n  filter,\n})\n\n\n","import { connect } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport { addTodo } from \"../actions\";\n\nexport default connect(null, { addTodo })(Header);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst Link = ({ active, children, setFilter }) => (\n  <a\n    href=\"#/\"\n    className={classnames({\n      selected: active\n    })}\n    style={{ cursor: 'pointer' }}\n    onClick={() => setFilter()}\n  >\n    {children}\n  </a>\n\n\n\n)\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  setFilter: PropTypes.func.isRequired\n\n}\n\nexport default Link;\n\n","import { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\nimport Link from '../components/Link';\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setFilter: () => {\n    dispatch(setVisibilityFilter(ownProps.filter))\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link);\n","export const SHOW_ALL = 'show_all';\nexport const SHOW_COMPLETED = 'show_completed';\nexport const SHOW_ACTIVE = 'show_active';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FilterLink from '../containers/FilterLink';\nimport { SHOW_ACTIVE, SHOW_ALL, SHOW_COMPLETED } from '../constants/TodoFilters';\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed',\n}\n\nfunction Footer(props) {\n  const { activeCount, completedCount, onClearCompleted } = props;\n  const itemWord = activeCount === 1 ? 'item' : 'items';\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n      <ul className=\"filters\">\n        {Object.keys(FILTER_TITLES).map(filter =>\n          <li key={filter}>\n            <FilterLink filter={filter}>\n              {FILTER_TITLES[filter]}\n            </FilterLink>\n          </li>\n          )}\n      </ul>\n      {\n        !!completedCount && \n        <button\n          className=\"clear-completed\"\n          onClick={onClearCompleted}\n        >\n          Clear completed\n        </button>\n      }\n    </footer>\n  )\n}\n\nFooter.propTypes = {\n  completedCount: PropTypes.number.isRequired,\n  activeCount: PropTypes.number.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n}\n\nexport default Footer;\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport TodoTextInput from './TodoTextInput';\n\nexport default class TodoItem extends Component {\n  static propTypes = {\n    todo: PropTypes.object.isRequired,\n    editTodo: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    completeTodo: PropTypes.func.isRequired,\n  }\n\n  state = {\n    editing: false,\n  }\n\n  handleDoubleClick = () => {\n    this.setState({\n      editing: true,\n    })\n  }\n\n  handleSave = (id, text) => {\n    if (text.length === 0) {\n      this.props.deleteTodo(id);\n    } else {\n      this.props.editTodo(id, text)\n    }\n    this.setState({\n      editing: false,\n    })\n  }\n  render() {\n    const { todo, completeTodo, deleteTodo } = this.props;\n    const { editing } = this.state;\n\n    let element;\n\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput\n          text={todo.text}\n          editing={editing}\n          onSave={(text) => this.handleSave(todo.id, text)}\n        />\n      )\n    } else {\n      element = (\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => completeTodo(todo.id)}\n          />\n          <label\n            onDoubleClick={this.handleDoubleClick}\n          >\n            {todo.text}\n          </label>\n          <button\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n          />\n        </div>\n      )\n    }\n    return (\n      <li\n        className={classnames({\n          completed: todo.completed,\n          editing: this.state.editing,\n        })}\n      >\n        {element}\n      </li>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\n\nconst TodoList = ({ filteredTodos, actions }) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo =>\n      <TodoItem key={todo.id} todo={todo} {...actions} />\n    )}\n  </ul>\n)\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired),\n  actions: PropTypes.object.isRequired\n}\n\nexport default TodoList;\n\n","import { createSelector } from \"reselect\";\nimport { SHOW_ACTIVE, SHOW_ALL, SHOW_COMPLETED } from \"../constants/TodoFilters\";\n\nconst getVisibilityFilter = state => state.visibilityFilter;\nconst getTodos = state => state.todos;\n\nexport const getVisibleTodos = createSelector(\n  [getVisibilityFilter, getTodos],\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case SHOW_ALL:\n        return todos;\n\n      case SHOW_COMPLETED:\n        return todos.filter(todo => todo.completed);\n\n      case SHOW_ACTIVE:\n        return todos.filter(todo => !todo.completed);\n\n        default:\n          throw new Error('Unknown filter:' + visibilityFilter);\n    }\n  }\n)\n\nexport const getCompletedTodoCount = createSelector(\n  [getTodos],\n  todos => (\n      todos.reduce((count, todo) =>\n      todo.completed ? count + 1 : count,\n      0\n    )\n  )\n)","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as TodoActions from '../actions';\nimport TodoList from '../components/TodoList';\nimport { getVisibleTodos } from '../selectors';\n\nconst mapStateToProps = state => ({\n  filteredTodos: getVisibleTodos(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Footer from './Footer'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst MainSection = ({ todosCount, completedCount, actions }) =>\n  (\n    <section className=\"main\">\n      {\n        !!todosCount && \n        <span>\n          <input\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            checked={completedCount === todosCount}\n            readOnly\n          />\n          <label onClick={actions.completeAllTodos}/>\n        </span>\n      }\n      <VisibleTodoList />\n      {\n        !!todosCount &&\n        <Footer\n          completedCount={completedCount}\n          activeCount={todosCount - completedCount}\n          onClearCompleted={actions.clearCompleted}\n        />\n      }\n    </section>\n  )\n\nMainSection.propTypes = {\n  todosCount: PropTypes.number.isRequired,\n  completedCount: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nexport default MainSection;","import { connect } from 'react-redux';\nimport * as TodoActions from '../actions';\nimport { bindActionCreators } from 'redux';\nimport MainSection from '../components/MainSection';\nimport { getCompletedTodoCount } from '../selectors';\n\n\nconst mapStateToProps = state => ({\n  todosCount: state.todos.length,\n  completedCount: getCompletedTodoCount(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainSection)","import React from 'react';\nimport Header from '../containers/Header';\nimport MainSection from '../containers/MainSection';\n\nconst App = () => (\n  <div>\n    <Header />\n    <MainSection />\n  </div>\n)\n\nexport default App;\n","import {\n  ADD_TODO,\n  DELETE_TODO,\n  EDIT_TODO,\n  COMPLETE_TODO,\n  COMPLETE_ALL_TODOS,\n  CLEAR_COMPLETED\n} from '../constants/ActionTypes';\n\nconst initialState = [\n  {\n    text: 'Use Redux',\n    completed: false,\n    id: 0\n  }\n]\n\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n          completed: false,\n          text: action.text\n        }\n      ]\n\n      case DELETE_TODO:\n      return state.filter(todo => \n        todo.id !== action.id\n      )\n\n      case EDIT_TODO:\n      return state.map(todo =>\n        todo.id === action.id \n        ? { \n            ...todo,\n            text: action.text \n          } \n        : todo\n      )\n\n      case COMPLETE_TODO:\n      return state.map(todo =>\n        todo.id === action.id \n        ? {\n            ...todo,\n            completed: !todo.completed\n          }\n        : todo\n      )\n\n      case COMPLETE_ALL_TODOS:\n        const areAllMarked = state.every(todo => todo.completed)\n      return state.map(todo => ({\n        ...todo,\n        completed: !areAllMarked,\n      }))\n\n      case CLEAR_COMPLETED:\n        return state.filter(todo => todo.completed === false)\n\n      default:\n        return state;\n  }\n}","import { SET_VISIBILITY_FILTER } from \"../constants/ActionTypes\";\nimport { SHOW_ALL } from \"../constants/TodoFilters\";\n\nconst visibilityFilter = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter;\n      default:\n        return state;\n  }\n}\n\nexport default visibilityFilter;","import {combineReducers} from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nconst rootReducer = combineReducers ({\n  todos,\n  visibilityFilter\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\nimport 'todomvc-app-css/index.css';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}